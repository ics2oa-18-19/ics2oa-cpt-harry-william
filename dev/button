
"""
Button Click
1. Figure out how you want to represent a button. Create global variable(s)
   for it.
2. Draw the button using the information stored in the button's variable(s).
3. In the on_mouse_press function, compare the mouse x and mouse y values to
   the values of the button to determine if there was a click or not.
"""

import arcade

WIDTH = 640
HEIGHT = 480

# Key for button index values
# This makes dealing with buttons as lists slightly easier.
BTN_X = 0
BTN_Y = 1
BTN_WIDTH = 2
BTN_HEIGHT = 3
BTN_IS_CLICKED = 4
BTN_COLOR = 5
BTN_CLICKED_COLOR = 6

# You might want to Google:
# - python namedtuple
# - python classes
# Those would be better ways to store objects like our button.
button1 = [200, 200,300, 50, False, arcade.color.BLACK, arcade.color.BLUE]
button2 = [200,130,400,90,False,arcade.color.RED,arcade.color.GREEN]
button3 = [150, 200,40, 80, False, arcade.color.PINK, arcade.color.ICEBERG]
button4 = [132, 172,100, 76, False, arcade.color.YELLOW, arcade.color.WHITE]
button5 = [59, 325,100, 4, False, arcade.color.HAN_PURPLE, arcade.color.PALE_AQUA]
button6 = [300, 24,100, 230, False, arcade.color.SADDLE_BROWN, arcade.color.RED]
button7 = [75, 240,100, 10, False, arcade.color.CADET_BLUE, arcade.color.BLUE]
button8 = [78, 101,101, 68, False, arcade.color.LA_SALLE_GREEN, arcade.color.PALE_AQUA]
button9 = [17, 205,10, 23, False, arcade.color.OCEAN_BOAT_BLUE, arcade.color.KENYAN_COPPER]
button10 = [142, 200,152, 50, False, arcade.color.FALU_RED, arcade.color.YALE_BLUE]


def setup():
    arcade.open_window(WIDTH, HEIGHT, "My Arcade Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1 / 60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.on_key_press = on_key_press
    window.on_key_release = on_key_release
    window.on_mouse_press = on_mouse_press
    window.on_mouse_release = on_mouse_release

    arcade.run()


def update(delta_time):
    pass





def on_draw():
    arcade.start_render()
    # Draw in here...

    # Select the appropriate color to draw with
    if button2[BTN_IS_CLICKED]:
        color = button2[BTN_CLICKED_COLOR]
    else:
        color = button2[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button2[BTN_X],
                                      button2[BTN_Y],
                                      button2[BTN_WIDTH],
                                      button2[BTN_HEIGHT],
                                      color)
    if button1[BTN_IS_CLICKED]:
        color = button1[BTN_CLICKED_COLOR]
    else:
        color = button1[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button1[BTN_X],
                                      button1[BTN_Y],
                                      button1[BTN_WIDTH],
                                      button1[BTN_HEIGHT],
                                      color)
    if button3[BTN_IS_CLICKED]:
        color = button3[BTN_CLICKED_COLOR]
    else:
        color = button3[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button3[BTN_X],
                                      button3[BTN_Y],
                                      button3[BTN_WIDTH],
                                      button3[BTN_HEIGHT],
                                      color)
    if button4[BTN_IS_CLICKED]:
        color = button4[BTN_CLICKED_COLOR]
    else:
        color = button4[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button4[BTN_X],
                                      button4[BTN_Y],
                                      button4[BTN_WIDTH],
                                      button4[BTN_HEIGHT],
                                      color)
    if button5[BTN_IS_CLICKED]:
        color = button5[BTN_CLICKED_COLOR]
    else:
        color = button5[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button5[BTN_X],
                                      button5[BTN_Y],
                                      button5[BTN_WIDTH],
                                      button5[BTN_HEIGHT],
                                      color)
    if button6[BTN_IS_CLICKED]:
        color = button6[BTN_CLICKED_COLOR]
    else:
        color = button6[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button6[BTN_X],
                                      button6[BTN_Y],
                                      button6[BTN_WIDTH],
                                      button6[BTN_HEIGHT],
                                      color)
    if button7[BTN_IS_CLICKED]:
        color = button7[BTN_CLICKED_COLOR]
    else:
        color = button7[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button7[BTN_X],
                                      button7[BTN_Y],
                                      button7[BTN_WIDTH],
                                      button7[BTN_HEIGHT],
                                      color)
    if button8[BTN_IS_CLICKED]:
        color = button8[BTN_CLICKED_COLOR]
    else:
        color = button8[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button8[BTN_X],
                                      button8[BTN_Y],
                                      button8[BTN_WIDTH],
                                      button8[BTN_HEIGHT],
                                      color)
    if button9[BTN_IS_CLICKED]:
        color = button9[BTN_CLICKED_COLOR]
    else:
        color = button9[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button9[BTN_X],
                                      button9[BTN_Y],
                                      button9[BTN_WIDTH],
                                      button9[BTN_HEIGHT],
                                      color)
    if button10[BTN_IS_CLICKED]:
        color = button10[BTN_CLICKED_COLOR]
    else:
        color = button10[BTN_COLOR]

    # Draw button1
    arcade.draw_xywh_rectangle_filled(button10[BTN_X],
                                      button10[BTN_Y],
                                      button10[BTN_WIDTH],
                                      button10[BTN_HEIGHT],
                                      color)





def on_key_press(key, modifiers):
    pass


def on_key_release(key, modifiers):
    pass


def on_mouse_press(x, y, button, modifiers):
    print(f"Click at ({x}, {y})")

    # Check if click happened on button1
    if (x > button2[BTN_X] and x < button2[BTN_X] + button2[BTN_WIDTH] and
            y > button2[BTN_Y] and y < button2[BTN_Y] + button2[BTN_HEIGHT]):
        button2[BTN_IS_CLICKED] = True




    # Check if click happened on button1
    if (x > button1[BTN_X] and x < button1[BTN_X] + button1[BTN_WIDTH] and
            y > button1[BTN_Y] and y < button1[BTN_Y] + button1[BTN_HEIGHT]):
        button1[BTN_IS_CLICKED] = True

    if (x > button3[BTN_X] and x < button3[BTN_X] + button3[BTN_WIDTH] and
            y > button3[BTN_Y] and y < button3[BTN_Y] + button3[BTN_HEIGHT]):
        button3[BTN_IS_CLICKED] = True
    if (x > button4[BTN_X] and x < button4[BTN_X] + button4[BTN_WIDTH] and
            y > button4[BTN_Y] and y < button4[BTN_Y] + button4[BTN_HEIGHT]):
        button4[BTN_IS_CLICKED] = True
    if (x > button5[BTN_X] and x < button5[BTN_X] + button5[BTN_WIDTH] and
            y > button5[BTN_Y] and y < button5[BTN_Y] + button5[BTN_HEIGHT]):
        button5[BTN_IS_CLICKED] = True
    if (x > button6[BTN_X] and x < button6[BTN_X] + button6[BTN_WIDTH] and
            y > button6[BTN_Y] and y < button6[BTN_Y] + button6[BTN_HEIGHT]):
        button6[BTN_IS_CLICKED] = True
    if (x > button7[BTN_X] and x < button7[BTN_X] + button7[BTN_WIDTH] and
            y > button7[BTN_Y] and y < button7[BTN_Y] + button7[BTN_HEIGHT]):
        button7[BTN_IS_CLICKED] = True
    if (x > button8[BTN_X] and x < button8[BTN_X] + button8[BTN_WIDTH] and
            y > button8[BTN_Y] and y < button8[BTN_Y] + button8[BTN_HEIGHT]):
        button8[BTN_IS_CLICKED] = True
    if (x > button9[BTN_X] and x < button9[BTN_X] + button9[BTN_WIDTH] and
            y > button9[BTN_Y] and y < button9[BTN_Y] + button9[BTN_HEIGHT]):
        button9[BTN_IS_CLICKED] = True
    if (x > button10[BTN_X] and x < button10[BTN_X] + button10[BTN_WIDTH] and
            y > button10[BTN_Y] and y < button10[BTN_Y] + button10[BTN_HEIGHT]):
        button10[BTN_IS_CLICKED] = True





def on_mouse_release(x, y, button, modifiers):
    # When you let go of the mouse, all buttons should be set to False.
    button1[BTN_IS_CLICKED] = False
    button2[BTN_IS_CLICKED] = False
    button3[BTN_IS_CLICKED] = False
    button4[BTN_IS_CLICKED] = False
    button5[BTN_IS_CLICKED] = False
    button6[BTN_IS_CLICKED] = False
    button7[BTN_IS_CLICKED] = False
    button8[BTN_IS_CLICKED] = False
    button9[BTN_IS_CLICKED] = False
    button10[BTN_IS_CLICKED] = False


if __name__ == '__main__':
    setup()

